#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Process {
    int id;
    int burst_time;
    int arrival_time;
    int priority;
    int start_time;
    int end_time;
    int remaining_burst_time;
};



void calculate_priority_no_preemption(vector<Process>& processes) {
    int n = processes.size();
    int current_time = 0;
    int total_wait_time = 0;
    int total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        processes[i].remaining_burst_time = processes[i].burst_time;
    }

    while (!processes.empty()) {
        int highest_priority_idx = -1;
        int highest_priority = -1;

        for (int i = 0; i < processes.size(); i++) {
            if (processes[i].arrival_time <= current_time && processes[i].priority > highest_priority) {
                highest_priority = processes[i].priority;
                highest_priority_idx = i;
            }
        }

        if (highest_priority_idx == -1) {
            current_time++;
            continue;
        }

        Process& current_process = processes[highest_priority_idx];
        current_process.start_time = current_time;
        current_process.end_time = current_time + current_process.remaining_burst_time;

        total_wait_time += current_process.start_time - current_process.arrival_time;
        total_turnaround_time += current_process.end_time - current_process.arrival_time;

        current_time = current_process.end_time;
        processes.erase(processes.begin() + highest_priority_idx);
    }

    double avg_wait_time = (double)total_wait_time / n;
    double avg_turnaround_time = (double)total_turnaround_time / n;

    cout << "Priority without preemption:" << endl;
    cout << "Average waiting time = " << avg_wait_time << endl;
    cout << "Average turnaround time = " << avg_turnaround_time << endl;
}

int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;

    vector<Process> processes(n);

    for (int i = 0; i < n; i++) {
        cout << "Enter the burst time, arrival time, and priority of process " << i + 1 << ": ";
        cin >> processes[i].burst_time >> processes[i].arrival_time >> processes[i].priority;
    }

    calculate_priority_no_preemption(processes);

    return 0;
}
